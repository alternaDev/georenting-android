apply plugin: 'com.android.application'
apply plugin: 'com.android.databinding'
apply plugin: 'me.tatarka.retrolambda'
apply plugin: 'com.jakewharton.hugo'
apply plugin: 'com.neenbedankt.android-apt'
apply plugin: 'testfairy'

def versionMajor = 0
def versionMinor = 1
def versionPatch = 0
def versionBuild = System.getenv("TRAVIS_BUILD_NUMBER").equals("null") ? Integer.valueOf("$System.env.TRAVIS_BUILD_NUMBER") : 0 // bump for dogfood builds, public betas, etc.

def gitSha = 'git rev-parse --short HEAD'.execute([], project.rootDir).text.trim()
def buildTime = new Date().format("yyyy-MM-dd'T'HH:mm:ss'Z'", TimeZone.getTimeZone("UTC"))

def isTravis = "true".equals(System.getenv("TRAVIS"))
def preDexEnabled = "true".equals(System.getProperty("pre-dex", "true"))

android {
    compileSdkVersion 22
    buildToolsVersion '22.0.1'

    dexOptions {
        // Skip pre-dexing when running on Travis CI or when disabled via -Dpre-dex=false.
        preDexLibraries = preDexEnabled && !isTravis
    }

    signingConfigs {
        georenting {
            storeFile file("../keystore.jks")
            storePassword georentingKeystorePassword
            keyAlias "georenting"
            keyPassword georentingKeystorePassword
        }
    }

    defaultConfig {
        minSdkVersion 15
        targetSdkVersion 22

        versionCode versionMajor * 10000 + versionMinor * 1000 + versionPatch * 100 + versionBuild
        versionName "${versionMajor}.${versionMinor}.${versionPatch}"

        signingConfig signingConfigs.georenting
    }



    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        debug {
            applicationIdSuffix '.debug'
        }
    }

    productFlavors {
        internal {
            applicationId 'de.alternadev.georenting.internal'
        }
        production {
            applicationId 'de.alternadev.georenting'
        }
    }

    lintOptions {
        abortOnError false
        textReport true
        textOutput 'stdout'
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    testfairyConfig {
        apiKey testfairyKey
        autoUpdate true
        video "wifi"
        videoRate "0.5"
        videoQuality "low"
        maxDuration "15m"
        recordOnBackground true
        uploadProguardMapping true
    }
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')

    compile 'com.android.support:appcompat-v7:22.2.1'

    compile 'io.reactivex:rxandroid:0.25.0'
    compile 'io.reactivex:rxjava:1.0.13'
    compile 'io.reactivex:rxjava-async-util:0.21.0'

    compile 'com.jakewharton.timber:timber:3.1.0'

    compile 'com.squareup.picasso:picasso:2.5.2'
    compile 'com.squareup.retrofit:retrofit:1.9.0'

    debugCompile 'com.squareup.leakcanary:leakcanary-android:1.3.1'
    releaseCompile 'com.squareup.leakcanary:leakcanary-android-no-op:1.3.1'

    compile 'com.facebook.stetho:stetho:1.1.1'
    compile 'com.facebook.stetho:stetho-okhttp:1.1.1'

    compile 'com.google.dagger:dagger:2.0'
    apt 'com.google.dagger:dagger-compiler:2.0'

    compile 'com.jakewharton.byteunits:byteunits:0.9.0'

    compile 'com.google.android.gms:play-services-identity:7.5.0'
    compile 'com.google.android.gms:play-services-plus:7.5.0'
}

def installAll = tasks.create('installAll')
installAll.description = 'Install all applications.'
android.applicationVariants.all { variant ->
    installAll.dependsOn(variant.install)
    // Ensure we end up in the same group as the other install tasks.
    installAll.group = variant.install.group
}